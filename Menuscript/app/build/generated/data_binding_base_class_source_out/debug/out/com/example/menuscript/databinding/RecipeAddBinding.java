// Generated by view binder compiler. Do not edit!
package com.example.menuscript.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.menuscript.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecipeAddBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText recipeAddCategory;

  @NonNull
  public final EditText recipeAddComments;

  @NonNull
  public final EditText recipeAddServings;

  @NonNull
  public final EditText recipeAddTime;

  @NonNull
  public final EditText recipeAddTitle;

  private RecipeAddBinding(@NonNull LinearLayout rootView, @NonNull EditText recipeAddCategory,
      @NonNull EditText recipeAddComments, @NonNull EditText recipeAddServings,
      @NonNull EditText recipeAddTime, @NonNull EditText recipeAddTitle) {
    this.rootView = rootView;
    this.recipeAddCategory = recipeAddCategory;
    this.recipeAddComments = recipeAddComments;
    this.recipeAddServings = recipeAddServings;
    this.recipeAddTime = recipeAddTime;
    this.recipeAddTitle = recipeAddTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecipeAddBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecipeAddBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recipe_add, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecipeAddBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.recipe_addCategory;
      EditText recipeAddCategory = ViewBindings.findChildViewById(rootView, id);
      if (recipeAddCategory == null) {
        break missingId;
      }

      id = R.id.recipe_addComments;
      EditText recipeAddComments = ViewBindings.findChildViewById(rootView, id);
      if (recipeAddComments == null) {
        break missingId;
      }

      id = R.id.recipe_addServings;
      EditText recipeAddServings = ViewBindings.findChildViewById(rootView, id);
      if (recipeAddServings == null) {
        break missingId;
      }

      id = R.id.recipe_addTime;
      EditText recipeAddTime = ViewBindings.findChildViewById(rootView, id);
      if (recipeAddTime == null) {
        break missingId;
      }

      id = R.id.recipe_addTitle;
      EditText recipeAddTitle = ViewBindings.findChildViewById(rootView, id);
      if (recipeAddTitle == null) {
        break missingId;
      }

      return new RecipeAddBinding((LinearLayout) rootView, recipeAddCategory, recipeAddComments,
          recipeAddServings, recipeAddTime, recipeAddTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
